plugins {
    id 'com.android.application'
    id 'kotlin-android'
    id 'dagger.hilt.android.plugin'
    id 'kotlin-kapt'
}

android {
    compileSdk 31

    def globalConfiguration = rootProject.extensions.getByName("ext")
    compileSdkVersion globalConfiguration.getAt("androidCompileSdkVersion")

    defaultConfig {
        minSdkVersion globalConfiguration.getAt("androidMinSdkVersion")
        targetSdkVersion globalConfiguration.getAt("androidTargetSdkVersion")

        applicationId "com.msieff.movies"
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"

        buildConfigField "String", "API_BASE_URL", "\"https://api.themoviedb.org\""
        buildConfigField "String", "IMAGES_BASE_URL", "\"https://image.tmdb.org/t/p/original\""

        buildConfigField "String", "TMDB_API_KEY", "\"{SET_YOUR_TMDB_API_KEY_HERE}\""
    }

    buildFeatures {
        viewBinding true
    }

    dataBinding {
        enabled = true
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_11
        targetCompatibility JavaVersion.VERSION_11
    }

    kotlinOptions {
        jvmTarget = '11'
    }

    packagingOptions {
        exclude 'META-INF/gradle/incremental.annotation.processors'
    }
}

dependencies {
    // Networking
    implementation appDependencies.retrofit
    implementation appDependencies.retrofitGson
    implementation appDependencies.okHttp
    implementation appDependencies.okHttpLogging

    // Room
    implementation appDependencies.room
    kapt appDependencies.roomCompiler

    // Dependency injection
    implementation dataDependencies.hilt
    kapt dataDependencies.hiltCompiler
    // Modules
    implementation project(path: ':data')
    implementation project(path: ':domain')
    implementation project(path: ':presentation')


}


def getProps(String propName) {
    def propsFile = rootProject.file('local.properties')
    if (propsFile.exists()) {
        def props = new Properties()
        props.load(new FileInputStream(propsFile))
        return props[propName]
    } else {
        return "";
    }
}